---
import BaseLayout from '../layouts/BaseLayout.astro';
import { sponsors, tierDescriptions } from '../lib/sponsors.ts';

const tiers = ["Platinum", "Gold", "Silver", "Honorable Mentions"];
---

<BaseLayout>
  <!-- HERO -->
  <section class="hero" style="--hero-img: url('/images/sponsors-hero.JPG')">
    <div class="hero-content">
      <h1 class="hero-title">Our Sponsors</h1>
      <p class="hero-sub">Thank You for Fueling Our Journey</p>
    </div>
  </section>

  <!-- OVERVIEW -->
  <section class="section about" style="max-width:900px; margin:0 auto 4rem;">
    <h2>Partnering for Excellence</h2>
    <p>
      Our sponsors provide the resources, expertise, and mentorship that drive our success on and off the track. Below are the companies and organizations whose commitment powers Stony Brook Motorsports forward.
    </p>
  </section>

  <!-- SPONSORS GRID -->
  <section id="sponsors" class="sponsors">
    {tiers.map(tier => {
      const tierSponsors = sponsors.filter(s => s.tier === tier);
      if (!tierSponsors.length) return null;
      return (
        <div class={`sponsor-tier ${tier.toLowerCase().replace(/ /g, '-')}`}>
          <h3>{tier}</h3>
          {tierDescriptions[tier] && <p>{tierDescriptions[tier]}</p>}
          <div class={`sponsor-grid ${tier === 'Honorable Mentions' ? 'honorable-grid' : ''}`}>
            {tierSponsors.map(({ name, image, alt, url, personName }) => (
              <div class="logo-box">
                {url ? (
                  <a href={url} target="_blank" rel="noopener">
                    <img src={image} alt={alt} />
                  </a>
                ) : (
                  <img src={image} alt={alt} />
                )}
                {tier === 'Honorable Mentions' && <p>{personName ?? name}</p>}
              </div>
            ))}
          </div>
        </div>
      );
    })}
  </section>

  <!-- LOGO REVEAL ANIMATION -->
  <script type="module">
    document.addEventListener('DOMContentLoaded', () => {
      const boxes = document.querySelectorAll('.logo-box');
      const io = new IntersectionObserver((entries) => {
        entries.forEach(e => {
          if (e.isIntersecting) {
            e.target.classList.add('reveal');
            io.unobserve(e.target);
          }
        });
      }, { threshold: 0.3 });
      boxes.forEach(b => io.observe(b));
    });
  </script>
</BaseLayout>
