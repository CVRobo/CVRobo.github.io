---
import BaseLayout from '../layouts/BaseLayout.astro';
import { teamData, type TeamMember } from '../lib/teamData';
import '../styles/global.css';
import '../styles/team.css';

// Group members by subsystem
const grouped = teamData.reduce<Record<string, TeamMember[]>>((acc, member) => {
  (acc[member.subsystem] ||= []).push(member);
  return acc;
}, {});

// Specify the exact order you want:
const order = [
  'Leadership',
  'Powertrain',
  'Chassis',
  'Suspension',
  'Electronics',
  'Software',
  'Drivetrain',
  'Testing',
  'CNC',
  'Finance'
];
---

<BaseLayout>
  <!-- Hero -->
  <section class="hero" style="--hero-img: url('/images/team-hero.jpg')">
    <div class="hero-content">
      <h1 class="hero-title">Meet the Team</h1>
      <p class="hero-sub">The people behind the machine</p>
    </div>
  </section>

  <!-- Render in custom order -->
  {order.map((subsystem, idx) => {
    const members = grouped[subsystem];
    if (!members || members.length === 0) return null;

    // Find the lead/president
    const lead = members.find(m => /Lead|President/.test(m.role));

    return (
      <>
        <section class="section team-section fade-in" id={subsystem.toLowerCase()}>
          <h2 class="section-heading">{subsystem}</h2>

          {lead && (
            <div class="subsystem-lead">
              <img src={lead.image} alt={lead.name} class="leader-img" />
              <h3>{lead.name}</h3>
              <p class="role">{lead.role}</p>
              {lead.custom && <p class="member-custom">{lead.custom}</p>}
              {lead.linkedin && (
                <a href={lead.linkedin} class="linkedin-icon" target="_blank" rel="noopener">
                  <img src="/images/linkedin.svg" alt="LinkedIn" />
                </a>
              )}
              <p class="bio" data-clicks="0">{lead.bio}</p>
            </div>
          )}

          <div class="members-grid">
            {members
              .filter(m => m !== lead)
              .map(m => (
                <div class="member">
                  <img src={m.image} alt={m.name} />
                  <p class="member-name">{m.name}</p>
                  {m.custom && <p class="member-custom">{m.custom}</p>}
                  {m.linkedin && (
                    <a href={m.linkedin} class="linkedin-icon" target="_blank" rel="noopener">
                      <img src="/images/linkedin.svg" alt="LinkedIn" />
                    </a>
                  )}
                  <p class="bio" data-clicks="0">{m.bio}</p>
                </div>
              ))}
          </div>
        </section>

        {idx < order.length - 1 && <hr class="section-divider" />}
      </>
    );
  })}
  
  <!-- Scroll & Easterâ€‘egg Script (unchanged) -->
  <script type="module">
    const io = new IntersectionObserver(entries => {
      entries.forEach(e => {
        if (e.isIntersecting) {
          e.target.classList.add('visible');
          io.unobserve(e.target);
        }
      });
    }, { threshold: 0.2 });
    document.querySelectorAll('.fade-in').forEach(el => io.observe(el));

    document.querySelectorAll('.bio').forEach(el => {
      el.addEventListener('click', () => {
        const clicks = (+el.dataset.clicks || 0) + 1;
        el.dataset.clicks = clicks;
        if (clicks === 5) {
          const name = el.closest('.subsystem-lead, .member')
                         ?.querySelector('h3, .member-name')?.textContent;
          import('../lib/teamData').then(mod => {
            const member = mod.teamData.find(m => m.name === name);
            if (member?.funBio) el.textContent = member.funBio;
          });
        }
      });
    });
  </script>
</BaseLayout>
